#-------------------------------------------------------------------------------
# Name:        Search Logs

# Purpose:     Application to parse Apache logs to find a certain publication,
#              then append filtered log files with entries of that publication.
#              The program will check the last line of the filtered log to see
#              if it has already been appended, and if so, moves to the next.
#
# Usage Notes: The user locates the LOGS directory, chooses a range of years to
#              search, and enters the string of the pub to search.
#
#              ** Designed around a folder structure with logs by year.
#              Logs > Year > filtered > filtered logs
#                          > original logs
#                   > Year > filtered > filtered logs
#                          > original logs
#
# Author:      Dylan Harwell
#
# Created:     13/12/2017
# Copyright:   (c) dharwell 2017

#-------------------------------------------------------------------------------

import time
import sys, os
import linecache
import Tkinter as tk
import ttk
from tkFileDialog import askdirectory
import tkMessageBox
import ScrolledText

#-------------------------------------------------------------------------------
"""  Global Variables used to keep track of various events """

og_log_years = []           # Year folders in logs directory
missing_yrs = []            # Any year folders missing from logs directory
search_range = []           # Search range entered by user
total_list = []             # Total logs for each year, used for progress bar
txt_count1 = 0              # Length of validate directory message to text box
txt_count2 = 0              # Length of validate years message to text box
click_valyrs = 0            # Number of times validate years button clicked
click_openDir = False
validate_dir = False
validate_yrs = False
validate_lgs = False

#-------------------------------------------------------------------------------
""" Main Tkinter Class """

class SearchLogs(tk.Frame):

    def __init__(self, master):
        tk.Frame.__init__(self, master)
        self.pack()
        self.master.title("Search Logs Application")

        # Maintain control over OS close button, create keyboard commands
        self.master.protocol('WM_DELETE_WINDOW', self.clickQuit)
        self.master.bind('<Return>', self.clickRun)
        self.master.bind('<Escape>', self.clickQuit)

        # Draw window in center of screen when app is opened
        x = (self.master.winfo_screenwidth()-self.master.winfo_reqwidth())/2
        y = (self.master.winfo_screenheight()-self.master.winfo_reqheight())/3
        self.master.geometry("+{}+{}".format(x, y))

        # Create widget frames for geometry management
        dialog_frame1 = tk.Frame(self)
        dialog_frame1.pack(padx=15, pady=(10,0))
        dialog_frame2 = tk.Frame(self)
        dialog_frame2.pack(padx=15, pady=(10,10))
        search_frame = tk.Frame(self)
        search_frame.pack(padx=15, pady=(5,15))
        text_frame = tk.Frame(self)
        text_frame.pack(padx=15, pady=(5,15))
        self.loading_frame = tk.Frame(self)
        self.loading_frame.pack()
        quitrun_frame = tk.Frame(self)
        quitrun_frame.pack(padx=15, pady=15, anchor="s")

        # Create main messages to user
        message1 = tk.Message(
            dialog_frame1, text="This application will parse through log files "
            "to find instances of a specified publication for a given range of "
            "years and append the corresponding filtered log files with those "
            "instances.", font=("Arial", 12), justify="center", aspect=1400
            )
        message1.pack()

        message2 = tk.Message(
            dialog_frame2, text="First: Enter publication to search.\n"
            "Second: Select LOGS folder and validate.\nThird: Enter year range "
            "to search and validate.\nAfter successful validation, click Run.",
            font=("Arial", 10), justify="center", aspect=1100
            )
        message2.pack()

        # Create text entry boxes for user input
        self.label1 = ttk.Label(search_frame, text="Publication to search: ")
        self.label1.grid(row=0, column=0, pady=5, sticky="w")

        self.pub_input = ttk.Entry(search_frame)
        self.pub_input.grid(row=0, column=1, pady=5, sticky="e")
        self.pub_input.focus()

        self.label2 = ttk.Label(search_frame, text="From Year (YYYY): ")
        self.label2.grid(row=1, column=0, pady=5, sticky="w")

        self.from_year = ttk.Entry(search_frame)
        self.from_year.grid(row=1, column=1, pady=5, sticky="e")

        self.label3 = ttk.Label(search_frame, text="To Year (YYYY): ")
        self.label3.grid(row=2, column=0, pady=5, sticky="w")

        self.to_year = ttk.Entry(search_frame)
        self.to_year.grid(row=2, column=1, pady=5, sticky="e")

        # Create text box with scrollbar for output to user
        self.text_output = ScrolledText.ScrolledText(
            text_frame, wrap=tk.WORD, bd=2, height=10, width=40
            )
        self.text_output.pack(padx=5, pady=5, side="right")

        # Create buttons
        self.open_dir = ttk.Button(
            text_frame, width=16, text="Open Directory", default='active',
            command=self.openDirectory
            )
        self.open_dir.pack(padx=15, pady=5)

        self.valid_dir = ttk.Button(
            text_frame, width=16, text="Validate Directory",
            command=self.validateDir
            )
        self.valid_dir.pack(padx=15, pady=5)

        self.valid_yrs = ttk.Button(
            text_frame, width=16, text="Validate Years",
            command=self.validateYrs
            )
        self.valid_yrs.pack(padx=15, pady=5)

        self.run_button = ttk.Button(
            quitrun_frame, text="Run", default="active", command=self.clickRun
            )
        self.run_button.pack(padx=(240,0), side="right")

        self.quit_button = ttk.Button(
            quitrun_frame, text="Quit", command=self.clickQuit
            )
        self.quit_button.pack(padx=(0,240), side="left")

#-------------------------------------------------------------------------------
    """ Method to select a folder """

    def openDirectory(self):
        global og_log_years, click_openDir, validate_dir, validate_yrs
        self.text_output.delete(1.0, tk.END)
        self.og_log_folder = askdirectory(title="Select LOGS folder")
        log_years = os.listdir(self.og_log_folder)
        og_log_years = log_years
        click_openDir = True
        validate_dir = False
        validate_yrs = False

#-------------------------------------------------------------------------------
    """ Method to validate selected directory """

    def validateDir(self):
        global og_log_years, missing_yrs, click_openDir, validate_dir
        global txt_count1
        validate_dir = False

        # If clicked again, deletes all text in text box
        self.text_output.delete(1.0, tk.END)

        if click_openDir is True:
            if len(og_log_years) == 0:
                result1 = tkMessageBox.askretrycancel(
                    "Validation Error", "Empty LOGS folder selected. "
                    "\nRetry or Quit?"
                    )
                if result1 is False:
                    self.master.destroy()

            elif len(og_log_years) > 0:
                char_count = 0
                int_years = []
                error = False

                for yr in og_log_years:
                    char_count = len(yr)
                    while char_count == 4:
                        int_years.append(int(yr))
                        break

                    else:
                        error = True
                        result2 = tkMessageBox.askretrycancel(
                            "Validation Error", "Detected subfolder name in "
                            "directory having more or less than 4 characters. "
                            "Ensure LOGS folder contains only subfolders by "
                            "year (YYYY).\nRetry or Quit?"
                            )
                        if result2 is False:
                            self.master.destroy()
                        break

                if error is False:

                    # Non-consecutive year range - find missing year or years
                    if (int(og_log_years[-1])-int(og_log_years[0])) != (len(og_log_years)-1):
                        a = [x for x in range(int_years[0], int_years[-1] + 1)]
                        years = set(int_years)
                        missing = (list(years ^ set(a)))
                        message = (
                            "Directory contains non-consecutive years "
                            "subfolders.\nYear(s) missing in range: "
                            + str(missing).strip('[]') + "\n\nClick Yes to "
                            "continue, No to choose another folder, "
                            "Cancel to quit."
                            )
                        result3 = tkMessageBox.askyesnocancel(
                            "Validation Warning", message
                            )
                        missing_yrs = missing
                        if result3 is None:
                            self.master.destroy()
                        elif result3 is False:
                            pass
                        else:
                            self.text_output.insert(tk.END, (
                                "Missing " + str(missing).strip('[]') +
                                " years in range. User opted to continue.\n")
                                )
                            message = (
                                "Directory validated - Years contained: "
                                + str(int_years).strip('[]')
                                )
                            tkMessageBox.showinfo("Validation Info", message)
                            validate_dir = True
                            self.text_output.insert(tk.END, (message + '\n'))
                            txt_count1 = len(message)

                    else:
                        message = (
                            "Directory Validated - Years Contained: "
                            + str(int_years).strip('[]')
                            )
                        tkMessageBox.showinfo("Validation Info", message)
                        validate_dir = True
                        self.text_output.insert(tk.END, (message + '\n'))
                        txt_count1 = len(message)

        else:
            tkMessageBox.showerror(
                "Validation Error", "No directory selected - Please select LOGS"
                " folder."
                )

#-------------------------------------------------------------------------------
    """ Method to validate year inputs """

    def validateYrs(self):
        global validate_yrs, missing_yrs, search_range, total_list, txt_count1
        global txt_count2, click_valyrs

        from_input = self.from_year.get()
        to_input = self.to_year.get()
        error = False
        validate_yrs = False
        total_list = []

        # Clicked again, this removes the validate years text in the text box
        click_valyrs +=1
        if click_valyrs > 1 and txt_count2 > 0:
            self.text_output.delete("2.5 linestart", tk.END)
            self.text_output.insert(tk.END, "\n")

        # Logic for various error checking scenarios
        if click_openDir is False:
            tkMessageBox.showerror(
                "Validation Error", "No directory selected - Please select LOGS"
                " folder."
                )

        elif (len(from_input) == 0) or (len(to_input) == 0):
            tkMessageBox.showerror(
                "Validation Error", "Empty Year(s) - Please enter From Year and"
                " To Year."
                )

        elif from_input > to_input:
            tkMessageBox.showerror(
                "Validation Error", "Invalid Range - From Year cannot be "
                "greater than To Year."
                )

        elif (len(from_input) + len(to_input)) != 8:
            tkMessageBox.showerror(
                "Validation Error", "Invalid Format - Years must be of the form"
                " YYYY."
                )

        elif (from_input not in og_log_years) or (to_input not in og_log_years):
            tkMessageBox.showerror(
                "Validation Error", "One or both years entered are not in LOGS "
                "folder - Please enter valid years."
                )

        else:
            # Create list for search range
            search_range = []
            yr = int(from_input)
            while yr <= int(to_input):
                search_range.append(yr)
                yr += 1
            if missing_yrs:
                for yr in missing_yrs:
                    if yr in search_range:
                        search_range.remove(yr)

            # Loop through search range, create paths, check logs
            for year in search_range:
                # Create paths and list original and filtered logs
                fl = str(year) + "/filtered"
                yr_path = os.path.abspath(
                    os.path.join(self.og_log_folder, str(year))
                    )
                fl_path = os.path.abspath(
                    os.path.join(self.og_log_folder, fl)
                    )
                og_logs = os.listdir(yr_path)[1:]
                fl_logs = os.listdir(fl_path)

                # Check that number of original logs = number of filtered logs
                if len(og_logs) > len(fl_logs):
                    for log in og_logs:
                        if log in fl_logs:
                            pass
                        else:
                            tkMessageBox.showerror(
                                "Critical Error", "Missing filtered log for "
                                "date: " + log[-10:] + "\nUnable to validate!"
                                )
                            message1 = (
                                "Missing filtered log for date: " + log[-10:] +
                                "\n"
                                )
                            self.text_output.insert(tk.END, message1)
                            error = True

                elif len(og_logs) < len(fl_logs):
                    for log in fl_logs:
                        if log in og_logs:
                            pass
                        else:
                            tkMessageBox.showerror(
                                "Critical Error", "Missing original log for "
                                "date: " + log[-10:] + "\nUnable to validate!"
                                )
                            message2 = (
                                "Missing original log for date: " + log[-10:] +
                                "\n"
                                )
                            self.text_output.insert(tk.END, message2)
                            error = True

                else:
                    total_list.append(len(og_logs))

            if error is False:
                tkMessageBox.showinfo(
                    "Validation Info", "Years validated - OK to run!"
                    )
                message3 = (
                    "Years Validated - Search Range: " + from_input + " - "
                    + to_input
                    )
                self.text_output.insert(tk.END, (message3 + '\n'))
                txt_count2 = len(message3)

                validate_yrs = True

#-------------------------------------------------------------------------------
    """ Method to run the program """

    def clickRun(self, event=None):
        global og_log_years, missing_yrs, search_range, total_list, validate_yrs
        no_logs_found = True

        # Get user inputs from text entry boxes
        search_input = self.pub_input.get()
        from_input = self.from_year.get()
        to_input = self.to_year.get()

        # Logic for various error checking scenarios
        if click_openDir is False:
            tkMessageBox.showerror(
                "Run Error", "No directory selected - Please select LOGS folder"
                )

        elif (validate_dir is False) or (validate_yrs is False):
            tkMessageBox.showerror(
                "Run Error", "Directory and Years must be validated before"
                " running!"
                )

        elif len(search_input) == 0:
            tkMessageBox.showerror(
                "Run Error", "Empty publication search string - Please type "
                "string of publication to search."
                )

        elif (from_input not in og_log_years) or (to_input not in og_log_years):
            validate_yrs = False
            tkMessageBox.showerror(
                "Run Error", "One or both years entered are not in LOGS "
                "folder - Please enter valid years and validate again."
                )

        else:
            # Begin running main code here #
            message1 = (
                "Searching through logs from " + from_input + " to " + to_input
                + " for publication: " + search_input
                )
            self.text_output.insert(tk.END, (message1 + '\n'))
            self.text_output.insert(
                tk.END, "Started running: " + time.strftime("%H:%M:%S") + " "
                + time.strftime("%m/%d/%Y") + "\n"
                )

            # Set up progress bar labels and steps
            self.progress_var = tk.DoubleVar()
            self.progress_bar = ttk.Progressbar(
                self.loading_frame, orient="horizontal", length=630,
                variable=self.progress_var, maximum=sum(total_list),
                mode="determinate"
                )
            self.progress_bar.pack()
            progress = 0
            progress_step = 1 ##float(100)/float(total_logs)
            self.progress_label = tk.Label(self.loading_frame, text="")
            self.progress_label.pack()
            # Disable widgets while running
            self._toggle_state("disabled")

            # Begin main loop through year folders
            for year in search_range:

                # Create paths and list original and filtered logs
                fl = str(year) + "/filtered"
                yr_path = os.path.abspath(
                    os.path.join(self.og_log_folder, str(year))
                    )
                fl_path = os.path.abspath(
                    os.path.join(self.og_log_folder, fl)
                    )
                og_logs = os.listdir(yr_path)[1:]
                fl_logs = os.listdir(fl_path)

                # For each year, loop through original logs
                for log in og_logs:

                    # Create list, locate missed logs, append list
                    missed_logs = []
                    og_path = os.path.join(yr_path, log)

                    with open(og_path, "r") as LOG:
                        for line in LOG:
                            if search_input in line:
                                missed_logs.append(line)

                    if missed_logs:
                        no_logs_found = False

                        # Open corresponding filtered log
                        FLpath = os.path.join(fl_path, log)
                        count = 0

                        # Get last line of filtered log
                        check = False
                        with open(FLpath, "r") as FLLOG:
                            for Fline in FLLOG:
                                if search_input in Fline:
                                    check = True
                                count = count + 1
                            lastline = linecache.getline(FLpath, count)

                        # Check if pub has already been appended to log.
                        with open(FLpath, "a") as newFLLOG:
                            if search_input in lastline:
                                pass
                            elif check is True:
                                pass
                            else:
                                # Append filtered log
                                for missed in missed_logs:
                                    newFLLOG.write(missed)

                    # Update progress bar
                    progress_text = ("Processing folder: " + str(year)
                        + " , Log: " + log[-10:])
                    self.progress_label.configure(text=progress_text)
                    self.progress_label.update()
                    progress += progress_step
                    self.progress_var.set(progress)
                    self.progress_bar.update()
                    self.update()

                    if progress == sum(total_list):
                        done = True
                    else:
                        done = False

                # If no logs are found for the gicen pub, print message to user
                if no_logs_found:
                    self.text_output.insert(
                        tk.END, "No records found for that pub for year: "
                        + str(year) + "\n"
                        )

            # Update label on progress bar if script finished or aborted
            if done is True:
                self.progress_label.configure(text="Completed")
            else:
                self.progress_label.configure(text="Aborted Script...")

            # When finished re-enable widgets
            self._toggle_state("normal")
            self.text_output.insert(
                tk.END, "Finished running: " + time.strftime("%H:%M:%S") + " "
                + time.strftime("%m/%d/%Y") + "\n"
                )

#-------------------------------------------------------------------------------
    """ Method to disable widgets when program is running """

    def _toggle_state(self, state):
        state = state if state in ("normal", "disabled") else "normal"
        widgets = (
            self.label1, self.label2, self.label3, self.pub_input,
            self.from_year, self.to_year, self.open_dir, self.valid_dir,
            self.valid_yrs, self.run_button, self.quit_button
            )
        for widget in widgets:
            widget.configure(state=state)

#-------------------------------------------------------------------------------
    """ Method to quit program """

    def clickQuit(self, event=None):
        self.master.destroy()

################################################################################
#-------------------------------------------------------------------------------
################################################################################
""" Initialize application and call mainloop """

if __name__ == '__main__':
    root = tk.Tk()
    root.iconbitmap("usgs_logo_green_ELC_icon.ico")
    app = SearchLogs(root)
    app.mainloop()